@using Microsoft.Fast.Components.FluentUI
@using GalleonLibrary

@page "/"

<FluentHeader>Galleon</FluentHeader>
<FluentCard>
   <FluentInputLabel>Input Length: </FluentInputLabel>
    <FluentTextField @onchange="UpdateOutput"></FluentTextField>
    <br/><br/>
   <FluentDivider></FluentDivider>
   @if (_lengthParserResult is not null && _lengthParserResult.IsValid())
   {
       <FluentLabel>Imperial: @LengthDisplay.DisplayImperial(_lengthParserResult.LengthValues)</FluentLabel>
       <FluentLabel>Meters: @LengthDisplay.DisplayMeters(_lengthParserResult.LengthValues)</FluentLabel>
       <FluentLabel>Millimeters: @LengthDisplay.DisplayMillimeters(_lengthParserResult.LengthValues)</FluentLabel>
   } 
    
    @if (_lengthParserResult is not null && !_lengthParserResult.IsValid())
    {
        <FluentLabel>Errors: </FluentLabel>
        <ul>
        @foreach (var error in _lengthParserResult.Errors)
        {
            <li>@error</li>
        }
        </ul>
    }
</FluentCard>


@code {
    private LengthParserResult? _lengthParserResult;
    
    private void UpdateOutput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        if (input is not null)
        {
            var tokens = LengthTokenizer.Tokenize(input);
            _lengthParserResult = LengthParser.ParseTokens(tokens);
            
        }
    }
}